unit GlobalFontSizeManager;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections, FMX.Types, AlephRem, AlephREmFont;

type
  IGlobalFontSizeAware = interface
    ['{9A1AB198-4D7B-420A-A11E-C685B095AE55}'] // Substitua por um GUID real
    function GetFontSize: Integer;
    procedure SetFontSize(const Value: Integer);
    procedure UpdateFontSize;
    property FontSize: Integer read GetFontSize write SetFontSize;
  end;

  TGlobalFontSizeManager = class(TComponent)
  private
    FFontBase: TFontBase;
    FMinFontSize: Integer;
    FFontPercentage: Single;
    FComponents: TList<IGlobalFontSizeAware>;
    function GetFontBase: Integer;
    procedure SetFontBase(const Value: Integer);
    function GetFontPercentage: Single;
    procedure SetFontPercentage(const Value: Single);
    function GetMinFontSize: Integer;
    procedure SetMinFontSize(const Value: Integer);
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure RegisterComponent(AComponent: IGlobalFontSizeAware);
    procedure UnregisterComponent(AComponent: IGlobalFontSizeAware);
    procedure UpdateAllFontSizes;
    function CalculateFontSize(AControlWidth: Integer): Integer;
  published
    property FontBase: Integer read GetFontBase write SetFontBase;
    property FontPercentage: Single read GetFontPercentage write SetFontPercentage;
    property MinFontSize: Integer read GetMinFontSize write SetMinFontSize;
  end;
implementation

{ TGlobalFontSizeManager }

constructor TGlobalFontSizeManager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FFontBase := TFontBase.Create(12);  // Valor padrão inicial
  FRemFontSize := TREmFontSize.Create(12); // Valor padrão inicial
  FFontPercentage := 1.0;  // Percentual padrão
  FMinFontSize := 10;      // Tamanho mínimo padrão
end;

destructor TGlobalFontSizeManager.Destroy;
begin
  FFontBase.Free;
  FRemFontSize.Free;
  inherited;
end;

function TGlobalFontSizeManager.GetFontBase: Integer;
begin
  Result := FFontBase.FontBase;
end;

function TGlobalFontSizeManager.GetFontPercentage: Single;
begin
  Result := FFontPercentage;
end;

procedure TGlobalFontSizeManager.SetFontBase(const Value: Integer);
begin
  if Assigned(FFontBase) then
    FFontBase.FontBase := Value;
end;

function TGlobalFontSizeManager.GetFontSize: Integer;
begin
  Result := FRemFontSize.FontSize;
end;

function TGlobalFontSizeManager.GetMinFontSize: Integer;
begin
  Result := FMinFontSize;
end;

procedure TGlobalFontSizeManager.SetFontSize(const Value: Integer);
begin
  if Assigned(FRemFontSize) then
    FRemFontSize.FontSize := Value;
end;

procedure TGlobalFontSizeManager.SetFontPercentage(const Value: Single);
begin
  FFontPercentage := Value;
end;

procedure TGlobalFontSizeManager.SetMinFontSize(const Value: Integer);
begin
  FMinFontSize := Value;
end;

function TGlobalFontSizeManager.CalculateFontSize(AControlWidth: Integer): Integer;
var
  CalculatedSize: Integer;
begin
  // Calcula o tamanho da fonte baseado na largura do controle e o percentual
  CalculatedSize := Round(AControlWidth * FFontPercentage / 100);

  // Verifica se o tamanho da fonte calculado é menor que o tamanho mínimo
  if CalculatedSize < FMinFontSize then
    CalculatedSize := FMinFontSize;

  Result := CalculatedSize;
end;

end.

