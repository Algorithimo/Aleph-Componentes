unit GlobalFontSizeManager;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections, System.Math,
  FMX.Forms, FMX.Controls, AlephRem, AlephREmFont;

type
  IGlobalFontSizeAware = interface
    ['{E3CF647C-7D56-446A-8089-F641C8F0106B}']
    procedure UpdateFontSize(NewBaseSize: Integer);
  end;

  TGlobalFontSizeManager = class(TComponent)
  private
    FBaseSize: Integer;
    FMinFontSize: Integer;
    FFontPercentage: Single;
    FComponents: TList<IGlobalFontSizeAware>;
    FForm: TForm;

    procedure SetBaseSize(const Value: Integer);
    procedure SetFontPercentage(const Value: Single);
    procedure SetMinFontSize(const Value: Integer);
    procedure SetForm(const Value: TForm);
    procedure UpdateAllComponents;
    procedure CalculateAndUpdateFontSize;
  protected
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure RegisterComponent(AComponent: IGlobalFontSizeAware);
    procedure UnregisterComponent(AComponent: IGlobalFontSizeAware);
  published
    property BaseSize: Integer read FBaseSize write SetBaseSize;
    property FontPercentage: Single read FFontPercentage write SetFontPercentage;
    property MinFontSize: Integer read FMinFontSize write SetMinFontSize;
    property Form: TForm read FForm write SetForm;
  end;

implementation

{ TGlobalFontSizeManager }

constructor TGlobalFontSizeManager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FBaseSize := 12;  // Valor padrão inicial
  FFontPercentage := 1.0;  // Percentual padrão
  FMinFontSize := 10;  // Tamanho mínimo padrão
  FComponents := TList<IGlobalFontSizeAware>.Create;
  if AOwner is TForm then
    SetForm(TForm(AOwner));
end;

destructor TGlobalFontSizeManager.Destroy;
begin
  FComponents.Free;
  inherited;
end;

procedure TGlobalFontSizeManager.SetBaseSize(const Value: Integer);
begin
  if FBaseSize <> Value then
  begin
    FBaseSize := Value;
    UpdateAllComponents;
  end;
end;

procedure TGlobalFontSizeManager.SetFontPercentage(const Value: Single);
begin
  if FFontPercentage <> Value then
  begin
    FFontPercentage := Value;
    CalculateAndUpdateFontSize;
  end;
end;

procedure TGlobalFontSizeManager.SetMinFontSize(const Value: Integer);
begin
  if FMinFontSize <> Value then
  begin
    FMinFontSize := Value;
    CalculateAndUpdateFontSize;
  end;
end;

procedure TGlobalFontSizeManager.SetForm(const Value: TForm);
begin
  if FForm <> Value then
  begin
    if Assigned(FForm) then
      RemoveFreeNotification(FForm);
    FForm := Value;
    if Assigned(FForm) then
    begin
      FreeNotification(FForm);
      CalculateAndUpdateFontSize;
    end;
  end;
end;

procedure TGlobalFontSizeManager.RegisterComponent(AComponent: IGlobalFontSizeAware);
begin
  if not FComponents.Contains(AComponent) then
  begin
    FComponents.Add(AComponent);
    AComponent.UpdateFontSize(FBaseSize);
  end;
end;

procedure TGlobalFontSizeManager.UnregisterComponent(AComponent: IGlobalFontSizeAware);
begin
  FComponents.Remove(AComponent);
end;

procedure TGlobalFontSizeManager.UpdateAllComponents;
var
  Component: IGlobalFontSizeAware;
begin
  for Component in FComponents do
    Component.UpdateFontSize(FBaseSize);
end;

procedure TGlobalFontSizeManager.CalculateAndUpdateFontSize;
var
  NewBaseSize: Integer;
begin
  if Assigned(FForm) then
  begin
    NewBaseSize := Max(Round(FForm.ClientWidth * FFontPercentage / 100), FMinFontSize);
    SetBaseSize(NewBaseSize);
  end;
end;

procedure TGlobalFontSizeManager.Notification(AComponent: TComponent; Operation: TOperation);
begin
  inherited;
  if (Operation = opRemove) and (AComponent = FForm) then
    FForm := nil;
end;

end.
