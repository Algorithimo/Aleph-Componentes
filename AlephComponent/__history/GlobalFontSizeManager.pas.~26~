unit GlobalFontSizeManager;

interface

uses
  System.SysUtils, System.Classes, AlephRem, AlephREmFont;

type
  TGlobalFontSizeManager = class(TComponent)
  private
    FFontBase: TFontBase;
    FRemFontSize: TREmFontSize;
    FMinFontSize: Integer;   // Fonte mínima
    FFontPercentage: Single; // Percentual do ClientWidth
    function GetFontBase: Integer;           // Propriedade para ler FontBase
    function GetFontSize: Integer;           // Propriedade para ler FontSize
    procedure SetFontBase(const Value: Integer);  // Propriedade para escrever FontBase
    procedure SetFontSize(const Value: Integer);  // Propriedade para escrever FontSize
  public
    function GetMinFontSize: Integer;
    function GetFontPercentage: Single;
    procedure SetFontPercentage(const Value: Single); // Propriedade para porcentagem da largura
    procedure SetMinFontSize(const Value: Integer);   // Propriedade para a fonte mínima
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function CalculateFontSize(AControlWidth: Integer): Integer; // Calcula o tamanho da fonte com base na porcentagem
  published
    property FontBase: Integer read GetFontBase write SetFontBase;     // Controla TFontBase.FontBase
    property FontSize: Integer read GetFontSize write SetFontSize;     // Controla TREmFontSize.FontSize
    property FontPercentage: Single read GetFontPercentage write SetFontPercentage; // Percentual do ClientWidth
    property MinFontSize: Integer read GetMinFontSize write SetMinFontSize;         // Fonte mínima permitida
  end;

implementation

{ TGlobalFontSizeManager }

constructor TGlobalFontSizeManager.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FFontBase := TFontBase.Create(12);  // Valor padrão inicial
  FRemFontSize := TREmFontSize.Create(12); // Valor padrão inicial
  FFontPercentage := 1.0;  // Percentual padrão
  FMinFontSize := 10;      // Tamanho mínimo padrão
end;

destructor TGlobalFontSizeManager.Destroy;
begin
  FFontBase.Free;
  FRemFontSize.Free;
  inherited;
end;

function TGlobalFontSizeManager.GetFontBase: Integer;
begin
  Result := FFontBase.FontBase;
end;

function TGlobalFontSizeManager.GetFontPercentage: Single;
begin
  Result := FFontPercentage;
end;

procedure TGlobalFontSizeManager.SetFontBase(const Value: Integer);
begin
  if Assigned(FFontBase) then
    FFontBase.FontBase := Value;
end;

function TGlobalFontSizeManager.GetFontSize: Integer;
begin
  Result := FRemFontSize.FontSize;
end;

function TGlobalFontSizeManager.GetMinFontSize: Integer;
begin
  Result := FMinFontSize;
end;

procedure TGlobalFontSizeManager.SetFontSize(const Value: Integer);
begin
  if Assigned(FRemFontSize) then
    FRemFontSize.FontSize := Value;
end;

procedure TGlobalFontSizeManager.SetFontPercentage(const Value: Single);
begin
  FFontPercentage := Value;
end;

procedure TGlobalFontSizeManager.SetMinFontSize(const Value: Integer);
begin
  FMinFontSize := Value;
end;

function TGlobalFontSizeManager.CalculateFontSize(AControlWidth: Integer): Integer;
var
  CalculatedSize: Integer;
begin
  // Calcula o tamanho da fonte baseado na largura do controle e o percentual
  CalculatedSize := Round(AControlWidth * FFontPercentage / 100);

  // Verifica se o tamanho da fonte calculado é menor que o tamanho mínimo
  if CalculatedSize < FMinFontSize then
    CalculatedSize := FMinFontSize;

  Result := CalculatedSize;
end;

end.

