unit AlephTipos;

interface

uses
  System.SysUtils,
  System.Classes,
  FMX.Types,
  FMX.Controls,
  FMX.Controls.Presentation,
  FMX.StdCtrls,
  FMX.Objects,
  FMX.Forms,System.UITypes,
  AlephRem;

type
  TREmMargins = class(TPersistent)
  private
    FFontBase : TFontBase;
    FTop: TREmSize;
    FLeft: TREmSize;
    FRight: TREmSize;
    FBottom: TREmSize;
    FControl: TControl; // Referência ao controle
    procedure SetBottom(const Value: TREmSize);
    procedure SetLeft(const Value: TREmSize);
    procedure SetRight(const Value: TREmSize);
    procedure SetTop(const Value: TREmSize);
    procedure OnChange(Sender: TObject);
    function GetFontBase: TFontBase;
    procedure setFontBase(const Value: TFontBase);
  public
    constructor Create(AControl: TControl);
    destructor Destroy; override;
    procedure ApplyToControl;
  published
    property AMarginBase : TFontBase read GetFontBase write setFontBase;
    property Top: TREmSize read FTop write SetTop;
    property Left: TREmSize read FLeft write SetLeft;
    property Right: TREmSize read FRight write SetRight;
    property Bottom: TREmSize read FBottom write SetBottom;
  end;

  TAlephTipo = class(TPersistent)
  private
    FPWidth: Double;
    FPHeight: Double;
    FControl: TControl;
    FActiveWidth: Boolean;
    FActiveHeight: Boolean;
    procedure SetPHeight(const Value: Double);
    procedure SetPWidth(const Value: Double);
    procedure SetActiveWidth(const Value: Boolean);
    procedure SetActiveHeight(const Value: Boolean);

  published
    property PHeight: Double read FPHeight write SetPHeight;
    property PWidth: Double read FPWidth write SetPWidth;
    property ActivePWidth: Boolean read FActiveWidth write SetActiveWidth;
    property ActivePHeight: Boolean read FActiveHeight write SetActiveHeight;
  public
    procedure Resize;
    procedure ResizeComponent(Sender: TObject);
    constructor Create(AControl: TControl);
    destructor Destroy; override;
  end;

  TControlHelper = class helper for TControl
  public
    procedure DoRealign;
  end;

implementation

{ TControlHelper }

procedure TControlHelper.DoRealign;
begin
  Self.Realign;
end;

{ TAlephTipo }

procedure TAlephTipo.ResizeComponent(Sender: TObject);
var

  ParentWidth, ParentHeight: Double;
begin


  if Assigned(FControl.Parent) then
  begin
    // Verifica se o Parent é um TForm
    if FControl.Parent is TForm then
    begin
      ParentWidth := TForm(FControl.Parent).ClientWidth;
      ParentHeight := TForm(FControl.Parent).ClientHeight;
    end
    // Verifica se o Parent é um TControl (layout ou retângulo)
    else if FControl.Parent is TControl then
    begin
      ParentWidth := TControl(FControl.Parent).Width;
      ParentHeight := TControl(FControl.Parent).Height;
    end
    else
      Exit; // Se não for um TForm ou TControl, não faz ajuste

    if Assigned(FControl) then
    begin
      FControl.BeginUpdate;
      try
        if FActiveWidth and (FPWidth > 0) then
        begin
          FControl.Width := ParentWidth * FPWidth / 100;
        end;
        if FActiveHeight and (FPHeight > 0) then
        begin
          FControl.Height := ParentHeight * FPHeight / 100;
        end;
      finally
        FControl.EndUpdate
      end;
    end;
  end;
end;

constructor TAlephTipo.Create(AControl: TControl);
begin
  inherited Create;
  FControl := AControl;
  FActiveWidth := True;
  FActiveHeight := True;
end;

destructor TAlephTipo.Destroy;
begin
  inherited;
end;

procedure TAlephTipo.Resize;
var
  ParentWidth, ParentHeight, CurrentWidthPercent, CurrentHeightPercent: Double;
begin
  if csDesigning in FControl.ComponentState then
  Begin
    if Assigned(FControl.Parent) then
    begin
      if Assigned(FControl.Parent) then
      begin
        // Verifica se o Parent é um TForm
        if FControl.Parent is TForm then
        begin
          ParentWidth := TForm(FControl.Parent).ClientWidth;
          ParentHeight := TForm(FControl.Parent).ClientHeight;
        end
        // Verifica se o Parent é um TControl (layout ou retângulo)
        else if FControl.Parent is TControl then
        begin
          ParentWidth := TControl(FControl.Parent).Width;
          ParentHeight := TControl(FControl.Parent).Height;
        end
        else
        begin
          Exit; // Se não for um TForm ou TControl, não faz ajuste
        end;

        // Calcula a porcentagem atual da largura e altura em relação ao pai
        if ParentWidth > 0 then
          CurrentWidthPercent := ((FControl.Width / ParentWidth) * 100)
        else
          CurrentWidthPercent := 0;

        if ParentHeight > 0 then
          CurrentHeightPercent := ((FControl.Height / ParentHeight) * 100)
        else
          CurrentHeightPercent := 0;

        // Agora você pode usar CurrentWidthPercent e CurrentHeightPercent como desejar
        if Self <> nil then
        begin
          PWidth := CurrentWidthPercent;
          PHeight := CurrentHeightPercent;
        end;
      end;
    end;
  End;
end;

procedure TAlephTipo.SetActiveHeight(const Value: Boolean);
begin
    if FActiveHeight <> Value then
  begin
    FActiveHeight := Value;
    if FActiveHeight then
      ResizeComponent(nil);
  end;
end;

procedure TAlephTipo.SetActiveWidth(const Value: Boolean);
begin
  if FActiveWidth <> Value then
  begin
    FActiveWidth := Value;
    if FActiveWidth then
      ResizeComponent(nil);
  end;
end;
procedure TAlephTipo.SetPHeight(const Value: Double);
begin
  if FPHeight <> Value then
  begin
    FPHeight := Value;
    if FActiveHeight then
      ResizeComponent(nil);
  end;
end;

procedure TAlephTipo.SetPWidth(const Value: Double);
begin
  if FPWidth <> Value then
  begin
    FPWidth := Value;
    if FActiveWidth then
      ResizeComponent(nil);
  end;
end;

{ TREmMargins }

constructor TREmMargins.Create(AControl: TControl);
begin
  inherited Create;
  FControl := AControl;

  if not Assigned(FFontBase) then
  begin
    FFontBase := TFontBase.Create(12);
  end;

 if Assigned(FFontBase) then
  begin
    FTop := TREmSize.Create(FFontBase);
    FLeft := TREmSize.Create(FFontBase);
    FRight := TREmSize.Create(FFontBase);
    FBottom := TREmSize.Create(FFontBase);
  end
  else
  begin
    raise Exception.Create('FontBase não pode ser nil.');
  end;
  // Adiciona handlers para mudança de propriedades
  FTop.OnChange := OnChange;
  FLeft.OnChange := OnChange;
  FRight.OnChange := OnChange;
  FBottom.OnChange := OnChange;
end;

destructor TREmMargins.Destroy;
begin
  if Assigned(FTop) then
    FTop.Free;
  if Assigned(FLeft) then
    FLeft.Free;
  if Assigned(FRight) then
    FRight.Free;
  if Assigned(FBottom) then
    FBottom.Free;
  inherited Destroy;
end;

function TREmMargins.GetFontBase: TFontBase;
begin
  Result := FFontBase;
end;

procedure TREmMargins.OnChange(Sender: TObject);
begin
  ApplyToControl;
end;

procedure TREmMargins.ApplyToControl;
begin
  if Assigned(FControl) then
  begin
    FControl.Margins.Top := FTop.ToPixels;
    FControl.Margins.Left := FLeft.ToPixels;
    FControl.Margins.Right := FRight.ToPixels;
    FControl.Margins.Bottom := FBottom.ToPixels;
    // Reaplica as margens e realinha o controle
    FControl.DoRealign;
  end
  else
  begin
    raise Exception.Create('FControl não está atribuído.');
  end;

end;

procedure TREmMargins.SetBottom(const Value: TREmSize);
begin
  FBottom.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

procedure TREmMargins.setFontBase(const Value: TFontBase);
begin
  if Assigned(FFontBase) then
    FFontBase.Assign(Value);
end;

procedure TREmMargins.SetLeft(const Value: TREmSize);
begin
  FLeft.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

procedure TREmMargins.SetRight(const Value: TREmSize);
begin
  FRight.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

procedure TREmMargins.SetTop(const Value: TREmSize);
begin
  FTop.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

end.

