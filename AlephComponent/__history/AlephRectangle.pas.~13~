unit AlephRectangle;

interface

uses
  System.SysUtils,
  System.Classes,
  FMX.Types,
  FMX.Controls,
  FMX.Controls.Presentation,
  FMX.StdCtrls,
  FMX.Objects,
  FMX.Forms,
  System.Generics.Collections,
  InterfAlephTipo,
  AlephRem;

type
  TREmMargins = class(TPersistent)
  private
    FTop: TREmSize;
    FLeft: TREmSize;
    FRight: TREmSize;
    FBottom: TREmSize;
    FControl: TControl; // Referência ao controle
    procedure SetBottom(const Value: TREmSize);
    procedure SetLeft(const Value: TREmSize);
    procedure SetRight(const Value: TREmSize);
    procedure SetTop(const Value: TREmSize);
    procedure OnChange(Sender: TObject);
  public
    constructor Create(AFontBase: TFontBase; AControl: TControl);
    destructor Destroy; override;
    procedure ApplyToControl;
  published
    property Top: TREmSize read FTop write SetTop;
    property Left: TREmSize read FLeft write SetLeft;
    property Right: TREmSize read FRight write SetRight;
    property Bottom: TREmSize read FBottom write SetBottom;
  end;

  TAlephTipo = class(TPersistent)
  private
    FPWidth: Integer;
    FPHeight: Integer;
    FControl: TControl;
    procedure SetPHeight(const Value: Integer);
    procedure SetPWidth(const Value: Integer);

  published
    property PHeight: Integer read FPHeight write SetPHeight;
    property PWidth: Integer read FPWidth write SetPWidth;
  public
    procedure Resize;
    procedure AdjustSize(Sender: TObject);
    constructor Create(AControl: TControl);
    destructor Destroy; override;
  end;

  TControlHelper = class helper for TControl
  public
    procedure DoRealign;
  end;

  TAlephRectangle = class(TRectangle, IInterfAlephTipo)
  private
    FAlephTipo: TAlephTipo;
    FCornerPerWidthPercent: Integer;
    FCornerPerHeightPercent: Integer;
    procedure SetCornerPerHeightPercent(const Value: Integer);
    procedure SetCornerPerWidthPercent(const Value: Integer);
    procedure AdjustSize(Sender: TObject);
    procedure FormResizeHandler(Sender: TObject);
    class procedure GlobalFormResizeHandler(Sender: TObject); static;
    function GetTipo: TAlephTipo;
    procedure SetTipo(const Value: TAlephTipo);
  protected
    procedure Resize; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure SetMarginsWithPercentageHeight(AParentHeight: Integer;
      Top, Bottom, Left, Right: Single);
    procedure SetMarginsWithPercentageWidth(AParentWidth: Integer;
      Top, Bottom, Left, Right: Single);
    procedure AdjustCornerSize(Sender: TObject);
  published
    property Tipo: TAlephTipo read GetTipo write SetTipo;
    property CornerHeightPercent: Integer read FCornerPerHeightPercent
      write SetCornerPerHeightPercent;
    property CornerWidthPercent: Integer read FCornerPerWidthPercent
      write SetCornerPerWidthPercent;
  end;

procedure Register;

implementation

var
  AlephRectangles: TList<TAlephRectangle>;

procedure RegisterAlephRectangle(ARect: TAlephRectangle);
begin
  if not Assigned(AlephRectangles) then
    AlephRectangles := TList<TAlephRectangle>.Create;
  AlephRectangles.Add(ARect);
end;

procedure UnregisterAlephRectangle(ARect: TAlephRectangle);
begin
  if Assigned(AlephRectangles) then
  begin
    AlephRectangles.Remove(ARect);
    if AlephRectangles.Count = 0 then
      FreeAndNil(AlephRectangles);
  end;
end;

function TAlephRectangle.GetTipo: TAlephTipo;
begin
  Result := FAlephTipo;
end;

class procedure TAlephRectangle.GlobalFormResizeHandler(Sender: TObject);
var
  i: Integer;
begin
  if Assigned(AlephRectangles) then
  begin
    for i := 0 to AlephRectangles.Count - 1 do
    begin
      AlephRectangles[i].AdjustSize(Sender);
    end;
  end;
end;

procedure TAlephRectangle.Resize;
var
  ParentWidth, ParentHeight: Single;
  CurrentWidthPercent, CurrentHeightPercent: Integer;
begin
  inherited;

  if Assigned(Self.Parent) then
  begin
    // Verifica se o Parent é um TForm
    if Self.Parent is TForm then
    begin
      ParentWidth := TForm(Self.Parent).ClientWidth;
      ParentHeight := TForm(Self.Parent).ClientHeight;
    end
    // Verifica se o Parent é um TControl (layout ou retângulo)
    else if Self.Parent is TControl then
    begin
      ParentWidth := TControl(Self.Parent).Width;
      ParentHeight := TControl(Self.Parent).Height;
    end
    else
    begin
      Exit; // Se não for um TForm ou TControl, não faz ajuste
    end;

    // Calcula a porcentagem atual da largura e altura em relação ao pai
    if ParentWidth > 0 then
      CurrentWidthPercent := Round((Self.Width / ParentWidth) * 100)
    else
      CurrentWidthPercent := 0;

    if ParentHeight > 0 then
      CurrentHeightPercent := Round((Self.Height / ParentHeight) * 100)
    else
      CurrentHeightPercent := 0;

    // Agora você pode usar CurrentWidthPercent e CurrentHeightPercent como desejar
    FAlephTipo.PWidth := CurrentWidthPercent;
    FAlephTipo.PHeight := CurrentHeightPercent;
  end;
end;

procedure Register;
begin
  RegisterComponents('Aleph', [TAlephRectangle]);
end;

{ TAlephRectangle }

procedure TAlephRectangle.SetTipo(const Value: TAlephTipo);
begin
  FAlephTipo.Assign(Value);
  AdjustSize(nil);
end;

procedure TAlephRectangle.AdjustSize(Sender: TObject);
var

  ParentWidth, ParentHeight: Single;
begin
  if Assigned(Self.Parent) then
  begin
    // Verifica se o Parent é um TForm
    if Self.Parent is TForm then
    begin
      ParentWidth := TForm(Self.Parent).ClientWidth;
      ParentHeight := TForm(Self.Parent).ClientHeight;
    end
    // Verifica se o Parent é um TControl (layout ou retângulo)
    else if Self.Parent is TControl then
    begin
      ParentWidth := TControl(Self.Parent).Width;
      ParentHeight := TControl(Self.Parent).Height;
    end
    else
      Exit; // Se não for um TForm ou TControl, não faz ajuste

    if Assigned(Self) then
    begin
      Self.BeginUpdate;
      try
        if FAlephTipo.PWidth > 0 then
        begin
          Self.Width := ParentWidth * FAlephTipo.PWidth / 100;
        end;
        if FAlephTipo.PHeight > 0 then
        begin
          Self.Height := ParentHeight * FAlephTipo.PHeight / 100;
        end;
      finally
        Self.EndUpdate
      end;
    end;
  end;
end;

constructor TAlephRectangle.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  FAlephTipo := TAlephTipo.Create(Self);
  RegisterAlephRectangle(Self);
  if AOwner is TForm then
  begin
    TForm(AOwner).OnResize := FormResizeHandler;
    // Registra o evento de redimensionamento global
  end;
  RegisterAlephRectangle(Self); // Registra o componente na lista
end;

destructor TAlephRectangle.Destroy;
begin
  UnregisterAlephRectangle(Self);
  FreeAndNil(AlephRectangles);
  FreeAndNil(FAlephTipo);
  inherited Destroy;
end;

procedure TAlephRectangle.SetMarginsWithPercentageHeight(AParentHeight: Integer;
  Top, Bottom, Left, Right: Single);
var
  NewMarginSizeTop, NewMarginSizeBottom, NewMarginSizeLeft,
    NewMarginSizeRight: Integer;
begin
  Self.BeginUpdate;
  // Calcular o novo tamanho das margens com base na largura do formulário e nos percentuais
  NewMarginSizeTop := Round(AParentHeight * Top);
  NewMarginSizeBottom := Round(AParentHeight * Bottom);
  NewMarginSizeLeft := Round(AParentHeight * Left);
  NewMarginSizeRight := Round(AParentHeight * Right);

  // Garantir que os tamanhos das margens não fiquem menores que um valor mínimo
  if NewMarginSizeTop = 0 then
    NewMarginSizeTop := 0;
  if NewMarginSizeBottom = 0 then
    NewMarginSizeBottom := 0;
  if NewMarginSizeLeft = 0 then
    NewMarginSizeLeft := 0;
  if NewMarginSizeRight = 0 then
    NewMarginSizeRight := 0;

  // Ajustar as margens do componente
  Self.Margins.Top := NewMarginSizeTop;
  Self.Margins.Bottom := NewMarginSizeBottom;
  Self.Margins.Left := NewMarginSizeLeft;
  Self.Margins.Right := NewMarginSizeRight;
  Self.EndUpdate;
end;

procedure TAlephRectangle.SetMarginsWithPercentageWidth(AParentWidth: Integer;
  Top, Bottom, Left, Right: Single);
var
  NewMarginSizeTop, NewMarginSizeBottom, NewMarginSizeLeft,
    NewMarginSizeRight: Integer;
begin
  Self.BeginUpdate;
  // Calcular o novo tamanho das margens com base na largura do formulário e nos percentuais
  NewMarginSizeTop := Round(AParentWidth * Top);
  NewMarginSizeBottom := Round(AParentWidth * Bottom);
  NewMarginSizeLeft := Round(AParentWidth * Left);
  NewMarginSizeRight := Round(AParentWidth * Right);

  // Garantir que os tamanhos das margens não fiquem menores que um valor mínimo
  if NewMarginSizeTop = 0 then
    NewMarginSizeTop := 0;
  if NewMarginSizeBottom = 0 then
    NewMarginSizeBottom := 0;
  if NewMarginSizeLeft = 0 then
    NewMarginSizeLeft := 0;
  if NewMarginSizeRight = 0 then
    NewMarginSizeRight := 0;

  // Ajustar as margens do componente
  Self.Margins.Top := NewMarginSizeTop;
  Self.Margins.Bottom := NewMarginSizeBottom;
  Self.Margins.Left := NewMarginSizeLeft;
  Self.Margins.Right := NewMarginSizeRight;
  Self.EndUpdate;
end;

procedure TAlephRectangle.AdjustCornerSize(Sender: TObject);
begin
  Self.BeginUpdate;

  if CornerHeightPercent = 0 then
  Begin

    Self.XRadius := Self.Height * CornerHeightPercent / 100;
    Self.YRadius := Self.Height * CornerHeightPercent / 100;
  End;

  if CornerWidthPercent = 0 then
  Begin

    Self.XRadius := Self.Width * CornerWidthPercent / 100;
    Self.YRadius := Self.Width * CornerWidthPercent / 100;
  End;

  Self.EndUpdate;
end;

procedure TAlephRectangle.SetCornerPerHeightPercent(const Value: Integer);
begin
  FCornerPerHeightPercent := Value;
end;

procedure TAlephRectangle.SetCornerPerWidthPercent(const Value: Integer);
begin
  FCornerPerWidthPercent := Value;
end;

// ---------------------  AdjustCornerSize ---------------------  //

procedure TAlephRectangle.FormResizeHandler(Sender: TObject);
begin
  GlobalFormResizeHandler(Sender);

end;

{ TControlHelper }

procedure TControlHelper.DoRealign;
begin
  Self.Realign;
end;

{ TAlephTipo }

procedure TAlephTipo.AdjustSize(Sender: TObject);
var

  ParentWidth, ParentHeight: Single;
begin
  if Assigned(FControl.Parent) then
  begin
    // Verifica se o Parent é um TForm
    if FControl.Parent is TForm then
    begin
      ParentWidth := TForm(FControl.Parent).ClientWidth;
      ParentHeight := TForm(FControl.Parent).ClientHeight;
    end
    // Verifica se o Parent é um TControl (layout ou retângulo)
    else if FControl.Parent is TControl then
    begin
      ParentWidth := TControl(FControl.Parent).Width;
      ParentHeight := TControl(FControl.Parent).Height;
    end
    else
      Exit; // Se não for um TForm ou TControl, não faz ajuste

    if Assigned(FControl) then
    begin
      FControl.BeginUpdate;
      try
        if FPWidth > 0 then
        begin
          FControl.Width := ParentWidth * FPWidth / 100;
        end;
        if FPHeight > 0 then
        begin
          FControl.Height := ParentHeight * FPHeight / 100;
        end;
      finally
        FControl.EndUpdate
      end;
    end;
  end;
end;

constructor TAlephTipo.Create(AControl: TControl);
begin
  inherited Create;
  FControl := AControl;
end;

destructor TAlephTipo.Destroy;
begin
  inherited;
end;

procedure TAlephTipo.Resize;
var
  ParentWidth, ParentHeight: Single;
  CurrentWidthPercent, CurrentHeightPercent: Integer;
begin
  if Assigned(FControl.Parent) then
  begin
    if Assigned(FControl.Parent) then
    begin
      // Verifica se o Parent é um TForm
      if FControl.Parent is TForm then
      begin
        ParentWidth := TForm(FControl.Parent).ClientWidth;
        ParentHeight := TForm(FControl.Parent).ClientHeight;
      end
      // Verifica se o Parent é um TControl (layout ou retângulo)
      else if FControl.Parent is TControl then
      begin
        ParentWidth := TControl(FControl.Parent).Width;
        ParentHeight := TControl(FControl.Parent).Height;
      end
      else
      begin
        Exit; // Se não for um TForm ou TControl, não faz ajuste
      end;

      // Calcula a porcentagem atual da largura e altura em relação ao pai
      if ParentWidth > 0 then
        CurrentWidthPercent := Round((FControl.Width / ParentWidth) * 100)
      else
        CurrentWidthPercent := 0;

      if ParentHeight > 0 then
        CurrentHeightPercent := Round((FControl.Height / ParentHeight) * 100)
      else
        CurrentHeightPercent := 0;

      // Agora você pode usar CurrentWidthPercent e CurrentHeightPercent como desejar
      if Self <> nil then
      begin
        PWidth := CurrentWidthPercent;
        PHeight := CurrentHeightPercent;
      end;
    end;
  end;
end;

procedure TAlephTipo.SetPHeight(const Value: Integer);
begin
  if FPHeight <> Value then
  begin
    FPHeight := Value;
    AdjustSize(nil);
  end;
end;

procedure TAlephTipo.SetPWidth(const Value: Integer);
begin
  if FPWidth <> Value then
  begin
    FPWidth := Value;
    AdjustSize(nil);
  end;
end;

{ TREmMargins }

constructor TREmMargins.Create(AFontBase: TFontBase; AControl: TControl);
begin
  inherited Create;
  FControl := AControl;

  if not Assigned(AFontBase) then
  begin
    AFontBase := TFontBase.Create(12);
  end;

 if Assigned(AFontBase) then
  begin
    FTop := TREmSize.Create(AFontBase);
    FLeft := TREmSize.Create(AFontBase);
    FRight := TREmSize.Create(AFontBase);
    FBottom := TREmSize.Create(AFontBase);
  end
  else
  begin
    raise Exception.Create('FontBase não pode ser nil.');
  end;
  // Adiciona handlers para mudança de propriedades
  FTop.OnChange := OnChange;
  FLeft.OnChange := OnChange;
  FRight.OnChange := OnChange;
  FBottom.OnChange := OnChange;
end;

destructor TREmMargins.Destroy;
begin
  if Assigned(FTop) then
    FTop.Free;
  if Assigned(FLeft) then
    FLeft.Free;
  if Assigned(FRight) then
    FRight.Free;
  if Assigned(FBottom) then
    FBottom.Free;
  inherited Destroy;
end;

procedure TREmMargins.OnChange(Sender: TObject);
begin
  ApplyToControl;
end;

procedure TREmMargins.ApplyToControl;
begin
  if Assigned(FControl) then
  begin
    FControl.Margins.Top := FTop.ToPixels;
    FControl.Margins.Left := FLeft.ToPixels;
    FControl.Margins.Right := FRight.ToPixels;
    FControl.Margins.Bottom := FBottom.ToPixels;
    // Reaplica as margens e realinha o controle
    FControl.DoRealign;
  end
  else
  begin
    raise Exception.Create('FControl não está atribuído.');
  end;

end;

procedure TREmMargins.SetBottom(const Value: TREmSize);
begin
  FBottom.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

procedure TREmMargins.SetLeft(const Value: TREmSize);
begin
  FLeft.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

procedure TREmMargins.SetRight(const Value: TREmSize);
begin
  FRight.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;

procedure TREmMargins.SetTop(const Value: TREmSize);
begin
  FTop.Assign(Value);
  ApplyToControl; // Aplica as margens automaticamente
end;


end.
