unit AlephRem;

interface

uses
  System.SysUtils,
  System.Classes,
  System.Generics.Collections;

type
  TREmSize = class(TPersistent)
  private
    FREM: Single;
    FFontBase: Single;
    FOnChange: TNotifyEvent;
    procedure SetFontBase(const Value: Single);
    procedure SetREM(const Value: Single);
  public
    constructor Create(ABaseSize: Single);
    destructor Destroy; override;
    function ToPixels: Single;
    property FontBase: Single read FFontBase write SetFontBase;
  published

    property REM: Single read FREM write SetREM;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  end;

implementation

{ TREmSize }

constructor TREmSize.Create(ABaseSize: Single);
begin
  FFontBase := ABaseSize;
  FREM := 0; // Valor padrão de 1 rem
end;

destructor TREmSize.Destroy;
begin
  inherited Destroy;
end;

procedure TREmSize.SetFontBase(const Value: Single);
begin
  if FFontBase <> Value then
  begin
    FFontBase := Value;
    if Assigned(FOnChange) then
      FOnChange(Self);
  end;
end;

procedure TREmSize.SetREM(const Value: Single);
begin
  if FREM <> Value then
  begin
    FREM := Value;
    if Assigned(FOnChange) then
      FOnChange(Self);
  end;
end;

function TREmSize.ToPixels: Single;
begin
  Result := FREM * FFontBase;
end;


end.
