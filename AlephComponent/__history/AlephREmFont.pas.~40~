unit AlephREmFont;

interface

uses
  System.Classes, Fmx.Controls, Fmx.StdCtrls, System.SysUtils, Fmx.Objects;

type

  IRemFontSize = interface
    ['{6719F41F-D2BC-4C5F-A9E4-828F52E45BA7}']
    procedure ResizeFont(Sender: TObject);
  end;

type
  TLabelAutoResizer = class
  private
    FLabel: TLabel;
    FAutoResizeHeight: Boolean;
    procedure SetAutoResizeHeight(const Value: Boolean);
  public
    constructor Create(ALabel: TLabel);
    destructor Destroy; override;
    procedure ResizeLabel;
    property AutoResizeHeight: Boolean read FAutoResizeHeight
      write SetAutoResizeHeight;
  end;

  TREmFontSize = class(TPersistent)
  private
    FBaseSize: Single;
    FREM: Single;
    FOnChange: TNotifyEvent;
    FControl: TControl;
    procedure SetBaseSize(const Value: Single);
    procedure SetREM(const Value: Single);
  public
    procedure TextResizeHandler(Sender: TObject);
    constructor Create(AControl: TControl);
    destructor Destroy; override;
    function ToPixels: Integer;
  published
    property FontSize: Single read FBaseSize write SetBaseSize;
    property REM: Single read FREM write SetREM;
    property OnChange: TNotifyEvent read FOnChange write FOnChange;
  end;

implementation

var
  FResizeManager: TREmFontSize = nil;

  { TREmFontSize }

constructor TREmFontSize.Create(AControl: TControl);
begin
  inherited Create;
  FControl := AControl;
  FBaseSize := 12; // Valor padrão para o tamanho base da fonte
  FREM := 1; // Valor padrão de 1 rem
end;

destructor TREmFontSize.Destroy;
begin
  inherited;
end;

procedure TREmFontSize.SetBaseSize(const Value: Single);
begin
  if FBaseSize <> Value then
  begin
    FBaseSize := Value;
    TextResizeHandler(nil);
    if Assigned(FOnChange) then
      FOnChange(Self);
  end;
end;

procedure TREmFontSize.SetREM(const Value: Single);
begin
  if FREM <> Value then
  begin
    FREM := Value;
    TextResizeHandler(nil);
    if Assigned(FOnChange) then
      FOnChange(Self);
  end;
end;

procedure TREmFontSize.TextResizeHandler(Sender: TObject);
var
  Component: IRemFontSize;
begin
  if Supports(FControl, IRemFontSize, Component) then
  begin
    Component.ResizeFont(Sender);
  end;
end;

function TREmFontSize.ToPixels: Integer;
begin
  Result := Round(FREM * FBaseSize);
end;

{ TLabelAutoResizer }

constructor TLabelAutoResizer.Create(ALabel: TLabel);
begin
  FLabel := ALabel;
  FAutoResizeHeight := False;
  //FLabel.OnResize := nil;
  // Por padrão, o redimensionamento automático está ativado
end;

destructor TLabelAutoResizer.Destroy;
begin
  inherited;
end;

procedure TLabelAutoResizer.ResizeLabel;
var
  TextHeight, TextWidth: Single;

begin
  if FAutoResizeHeight and Assigned(FLabel) then
  begin
    // Calcula a altura do texto
    TextHeight := FLabel.Canvas.TextHeight(FLabel.Text);
    TextWidth := FLabel.Canvas.TextWidth(FLabel.Text);
    // Ajusta a altura do TLabel de acordo com a altura do texto
    FLabel.Height := TextHeight + FLabel.Margins.Top + FLabel.Margins.Bottom;
    FLabel.Width := TextWidth + FLabel.Margins.Right + FLabel.Margins.Left;
  end;
end;

procedure TLabelAutoResizer.SetAutoResizeHeight(const Value: Boolean);
begin
  if FAutoResizeHeight <> Value then
  begin
    FAutoResizeHeight := Value;
    // Se a propriedade for ativada, redimensiona imediatamente
    if FAutoResizeHeight then
      ResizeLabel;
  end;
end;

end.

