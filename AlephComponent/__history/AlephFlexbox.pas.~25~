unit AlephFlexbox;

interface

uses
  System.Classes, System.SysUtils, System.Generics.Collections, FMX.Types, FMX.Controls, AlephFlexboxInterfaces, AlephFlexboxEnums;

type
  TFlexContainerBase = class(TInterfacedObject, IFlexContainer)
  private
    FItems: TObjectList<TFlexItem>;
    FFlexDirection: TFlexDirection;
    FJustifyContent: TJustifyContent;
    FAlignItems: TAlignItems;
    function GetFlexDirection: TFlexDirection;
    procedure SetFlexDirection(Value: TFlexDirection);
    function GetJustifyContent: TJustifyContent;
    procedure SetJustifyContent(Value: TJustifyContent);
    function GetAlignItems: TAlignItems;
    procedure SetAlignItems(Value: TAlignItems);
  public
    constructor Create;
    destructor Destroy; override;
    procedure CalculateLayout;
    procedure AddItem(AControl: TControl);
    procedure RemoveItem(AControl: TControl);
    function GetItems: TList<TFlexItem>;
    property FlexDirection: TFlexDirection read GetFlexDirection write SetFlexDirection;
    property JustifyContent: TJustifyContent read GetJustifyContent write SetJustifyContent;
    property AlignItems: TAlignItems read GetAlignItems write SetAlignItems;
  end;

implementation

{ TFlexContainerBase }

constructor TFlexContainerBase.Create;
begin
  inherited Create;
  FItems := TObjectList<TFlexItem>.Create(True);
  FFlexDirection := TFlexDirection.Row;
  FJustifyContent := TJustifyContent.FlexStart;
  FAlignItems := TAlignItems.Stretch;
end;

destructor TFlexContainerBase.Destroy;
begin
  FItems.Free;
  inherited;
end;

procedure TFlexContainerBase.AddItem(AControl: TControl);
var
  Item: TFlexItem;
begin
  Item := TFlexItem.Create(AControl);
  FItems.Add(Item);
end;

procedure TFlexContainerBase.RemoveItem(AControl: TControl);
var
  Item: TFlexItem;
begin
  for Item in FItems do
    if Item.Control = AControl then
    begin
      FItems.Remove(Item);
      Break;
    end;
end;

function TFlexContainerBase.GetItems: TList<TFlexItem>;
begin
  Result := FItems;
end;

function TFlexContainerBase.GetFlexDirection: TFlexDirection;
begin
  Result := FFlexDirection;
end;

procedure TFlexContainerBase.SetFlexDirection(Value: TFlexDirection);
begin
  FFlexDirection := Value;
  CalculateLayout;
end;

function TFlexContainerBase.GetJustifyContent: TJustifyContent;
begin
  Result := FJustifyContent;
end;

procedure TFlexContainerBase.SetJustifyContent(Value: TJustifyContent);
begin
  FJustifyContent := Value;
  CalculateLayout;
end;

function TFlexContainerBase.GetAlignItems: TAlignItems;
begin
  Result := FAlignItems;
end;

procedure TFlexContainerBase.SetAlignItems(Value: TAlignItems);
begin
  FAlignItems := Value;
  CalculateLayout;
end;

end.

